type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type UpgradeArgs = record {};
type TxnRecord = 
 record {
   caller: AccountId;
   gas: Gas;
   index: nat;
   msgCaller: opt principal;
   nonce: nat;
   timestamp: Time;
   transaction: Transaction;
   txid: Txid__1;
 };
type Txid__1 = blob;
type Txid = blob;
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: nat;
   created_at_time: opt Timestamp;
   fee: opt nat;
   from_subaccount: opt Subaccount;
   memo: opt blob;
   to: Account;
 };
type Transaction = 
 record {
   data: opt blob;
   from: AccountId;
   operation: Operation;
   to: AccountId;
   value: nat;
 };
type Timestamp = nat64;
type Time = int;
type Subaccount = blob;
type Setting = 
 record {
   EN_DEBUG: bool;
   MAX_CACHE_NUMBER_PER: nat;
   MAX_CACHE_TIME: nat;
   MAX_STORAGE_TRIES: nat;
 };
type Operation = 
 variant {
   approve: record {allowance: nat;};
   executeTransfer: record {
                      fallback: nat;
                      lockedTxid: Txid__1;
                    };
   lockTransfer: record {
                   decider: AccountId;
                   expiration: Time;
                   locked: nat;
                 };
   transfer: record {action: variant {
                               burn;
                               mint;
                               send;
                             };};
 };
type Metadata = 
 record {
   content: text;
   name: text;
 };
type InitArgs = 
 record {
   decimals: nat8;
   fee: nat;
   metadata: opt vec Metadata;
   name: opt text;
   owner: principal;
   symbol: opt text;
   totalSupply: nat;
 };
type ICRC1Canister = 
 service {
   drc202_canisterId: () -> (principal) query;
   /// returns events
   drc202_events: (opt Address) -> (vec TxnRecord) query;
   drc202_getConfig: () -> (Setting) query;
   /// returns drc202 pool
   drc202_pool: () -> (vec record {
                             Txid;
                             nat;
                           }) query;
   /// returns txn record. It's an query method that will try to find txn record in token canister cache.
   drc202_txn: (Txid) -> (opt TxnRecord) query;
   /// returns txn record. It's an update method that will try to find txn record in the DRC202 canister if the record does not exist in this canister.
   drc202_txn2: (Txid) -> (opt TxnRecord);
   historySize: () -> (nat) query;
   icrc1_balance_of: (Account__1) -> (nat) query;
   icrc1_decimals: () -> (nat8) query;
   icrc1_fee: () -> (nat) query;
   icrc1_metadata: () -> (vec record {
                                text;
                                Value;
                              }) query;
   icrc1_minting_account: () -> (opt Account__1) query;
   icrc1_name: () -> (text) query;
   icrc1_supported_standards: () ->
    (vec record {
           name: text;
           url: text;
         }) query;
   icrc1_symbol: () -> (text) query;
   icrc1_total_supply: () -> (nat) query;
   icrc1_transfer: (TransferArgs) -> (variant {
                                        Err: TransferError;
                                        Ok: nat;
                                      });
 };
type Gas = 
 variant {
   cycles: nat;
   noFee;
   token: nat;
 };
type CanisterArgs = 
 record {
   initArgs: InitArgs;
   upgradeArgs: opt UpgradeArgs;
 };
type Address = text;
type Account__1 = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
type AccountId = blob;
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : (CanisterArgs) -> ICRC1Canister
